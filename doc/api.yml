openapi: '3.0.2'
info:
  title: JCloudify Api
  version: 'latest'
servers:
  - url: https://jcloudify-api.preprod.hei.school

paths:
  /ping:
    get:
      tags:
        - Health
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /whoami:
    get:
      security:
        - bearerAuth: []
      tags:
        - Security
      summary: Who am I? Tells you who you are.
      operationId: whoami
      responses:
        '200':
          description: Who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /token:
    get:
      tags:
        - Security
      summary: Exchange Github code into token
      operationId: exchangeCode
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Github access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users:
    post:
      tags:
        - User
      summary: User signup
      requestBody:
        required: true
        description: The users to create
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: The created user accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /applications:
    get:
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Filter applications by name, case insensitive
          schema:
            type: string
        - name: user_id
          in: query
          description: Filter applications by the id of the user who owns it
          schema:
            type: string
      tags:
        - Application
      summary: Get all applications
      responses:
        '200':
          description: List of all applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: []
      tags:
        - Application
      summary: Create or update applications
      description: update if id is provided, create otherwise.
      requestBody:
        required: true
        description: Application to crupdate
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateApplication'
      responses:
        '200':
          description: The created applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /applications/{id}:
    parameters:
      - name: id
        in: path
        description: The identifier of the application
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - Application
      summary: Get an application by identifier
      responses:
        '200':
          description: The specified application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /applications/{id}/environments:
    parameters:
      - name: id
        in: path
        description: The identifier of the application
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - Application
      summary: Get environment list of an application
      responses:
        '200':
          description: List of environments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'


  /environments/{id}/env-vars:
    parameters:
      - name: id
        in: path
        description: The identifier of the environment
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - Environment
      summary: Get environment variables of an environment
      responses:
        '200':
          description: List of environment variables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentVariable'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: []
      tags:
        - Environment
      summary: Create or update environment variables
      description: update if id is provided, create otherwise.
      requestBody:
        required: true
        description: Environment variable to crupdate
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateEnvironmentVariable'
      responses:
        '200':
          description: The created environment variables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnvironmentVariable'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /environments/{id}/env-vars/{env_var_id}:
    parameters:
      - name: id
        in: path
        description: The identifier of the environment
        schema:
          type: string
        required: true
      - name: env_var_id
        in: path
        description: The identifier of the environment variable of the specified application
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - Environment
      summary: Get a environment variables by identifier
      responses:
        '200':
          description: The specified environment variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentVariable'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /environments/{id}/logs:
    parameters:
      - name: id
        in: path
        description: The identifier of the environment
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      parameters:
        - name: log_type
          in: query
          description: Filter logs by log type, case insensitive
          schema:
            type: string
        - name: start_date_time
          in: query
          description: Filter logs within a date and time range, must be used together with `end_date`
          schema:
            type: string
            format: date-time
        - name: end_date_time
          in: query
          description: Filter logs within a date and time range, must be used together with `start_date`
          schema:
            type: string
            format: date-time
      tags:
        - Environment
      summary: Get the logs of an environment
      responses:
        '200':
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /environments/{id}/logs/{log_id}:
    parameters:
      - name: id
        in: path
        description: The identifier of the environment
        schema:
          type: string
        required: true
      - name: log_id
        in: path
        description: The identifier of the log of the specified environment
        schema:
          type: string
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - Environment
      summary: Get a logs by identifier
      responses:
        '200':
          description: The specified log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    token:
      properties:
        access_token:
          type: string
        token_type:
          type: string
    CreateUser:
      type: object
      properties:
        first_name:
          type: string
          example: Hajatiana
        last_name:
          type: string
          example: Randrianary
        token:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
          example: leonardo
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - USER
            - ADMIN
        github_id:
          type: string
        avatar:
          type: string
        first_name:
          type: string
          example: Hajatiana
        last_name:
          type: string
          example: Randrianary
    Whoami:
      properties:
        user:
          $ref: '#/components/schemas/User'
    ApplicationBase:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        archived:
          type: boolean
          default: false
    Application:
      allOf:
        - $ref: '#/components/schemas/ApplicationBase'
      properties:
        github_repository:
          type: string
          example: https://github.com/testUser/testRepo
        creation_datetime:
          type: string
          format: date-time
        state:
          type: string
          enum:
            - HEALTHY
            - UNHEALTHY
    CrupdateApplication:
      allOf:
        - $ref: '#/components/schemas/ApplicationBase'
      properties:
        user_id:
          type: string
    EnvironmentType:
      type: string
      enum:
        - PROD
        - PREPROD
    Environment:
      type: object
      properties:
        id:
          type: string
        environment_type:
          $ref: '#/components/schemas/EnvironmentType'
        application_id:
          type: string
    EnvironmentVariable:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: ENV_EXAMPLE
        value:
          type: string
        archived:
          type: boolean
          default: false
    CrupdateEnvironmentVariable:
      allOf:
        - $ref: '#/components/schemas/EnvironmentVariable'
      properties:
        environment_id:
          type: string
    Log:
      type: object
      properties:
        id:
          type: string
        log_file_uri:
          type: string
          example: https://examplebucket.s3.eu-west-3.amazonaws.com/logfile
        log_datetime:
          type: string
          format: date-time
        log_type:
          type: string
          enum:
            - DEPLOYMENT_LOG
            - APPLICATION_LOG
    Plan:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        cost:
          type: double
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
