openapi: '3.0.2'
info:
  title: JCloudify Api
  version: 'latest'
servers:
  - url: https://api.preprod.jcloudify.com

paths:
  /ping:
    get:
      tags:
        - Health
      operationId: ping
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '429':
          $ref: './api.yml#/components/responses/429'
        '500':
          $ref: './api.yml#/components/responses/500'
  /whoami:
    $ref: "./security-api.yml#/operations/whoami"
  /token:
    $ref: "./security-api.yml#/operations/token"
  /gh-repos/{repo_owner}/{repo_name}/upload-build-uri:
    $ref: "./env-deploy-api.yml#/operations/uploadUri"
  /gh-repos/{repo_owner}/{repo_name}/env-deploys:
    $ref: "./env-deploy-api.yml#/operations/deploys"
  /users:
    $ref: "./user-api.yaml#/operations/users"
  /poja-versions:
    $ref: "./poja-related-api.yml#/operations/versions"
  /users/{userId}/installations:
    $ref: "./github-app-installation-api.yml#/operations/installations"
  /users/{userId}/billing:
    $ref: "./billing-api.yml#/operations/userBilling"
  /users/{userId}/applications:
    $ref: "./application-api.yml#/operations/applications"
  /users/{userId}/applications/{applicationId}:
    $ref: "./application-api.yml#/operations/applicationsById"
  /users/{userId}/applications/{applicationId}/billing:
    $ref: "./billing-api.yml#/operations/appBilling"
  /users/{userId}/applications/{applicationId}/environments:
    $ref: "./environment-api.yml#/operations/environments"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}:
    $ref: "./environment-api.yml#/operations/environmentsById"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/billing:
    $ref: "./billing-api.yml#/operations/envBilling"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/config:
    $ref: "./environment-api.yml#/operations/environmentConfig"
  /users/{userId}/applications/{applicationId}/deployments:
    $ref: "./application-api.yml#/operations/applicationDeployments"
  /users/{userId}/applications/{applicationId}/deployments/{deploymentId}:
    $ref: "./application-api.yml#/operations/applicationDeploymentsById"
  /users/{userId}/applications/{applicationId}/deployments/{deploymentId}/config:
    $ref: "./application-api.yml#/operations/applicationDeploymentConfig"
  /users/{userId}/applications/{applicationId}/deployments/{deploymentId}/states:
    $ref: "./application-api.yml#/operations/applicationDeploymentStates"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/deletionInitiation:
    $ref: "./stack-api.yml#/operations/deleteStack"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/deploymentInitiation:
    $ref: "./stack-api.yml#/operations/deployStack"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/stacks:
    $ref: "./stack-api.yml#/operations/stacks"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/stacks/{stackId}:
    $ref: "./stack-api.yml#/operations/stacksById"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/stacks/{stackId}/events:
    $ref: "./stack-api.yml#/operations/events"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/stacks/{stackId}/outputs:
    $ref: "./stack-api.yml#/operations/outputs"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/computeStackResources:
    $ref: "./stack-api.yml#/operations/computeStackResources"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/variables:
    $ref: "./environment-api.yml#/operations/environmentVariables"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/variables/{variableId}:
    $ref: "./environment-api.yml#/operations/environmentVariablesById"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/ssmparameters:
    $ref: "./environment-api.yml#/operations/environmentSsmParameters"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/functions/{functionName}/logGroups:
    $ref: "./environment-api.yml#/operations/environmentLogGroups"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/functions/{functionName}/logStreams:
    $ref: "./environment-api.yml#/operations/environmentLogStreams"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/functions/{functionName}/logStreamEvents:
    $ref: "./environment-api.yml#/operations/environmentLogStreamEvents"
  /users/{userId}/payment-details/payment-methods:
    $ref: "./payment-api.yml#/operations/methods"
  /users/{userId}/payment-details:
    $ref: "./payment-api.yml#/operations/details"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    userId:
      name: userId
      in: path
      description: The identifier of the user
      schema:
        type: string
      required: true
    applicationId:
      name: applicationId
      in: path
      description: The identifier of the application
      schema:
        type: string
      required: true
    environmentId:
      name: environmentId
      in: path
      description: The identifier of the environment
      schema:
        type: string
      required: true
    logId:
      name: logId
      in: path
      description: The identifier of the log of the specified environment
      schema:
        type: string
      required: true
    variableId:
      name: variableId
      in: path
      description: The identifier of the environment variable of the specified application
      schema:
        type: string
      required: true
    stackId:
      name: stackId
      in: path
      description: The identifier of the stack of a given environment
      schema:
        type: string
      required: true
    page:
      name: page
      in: query
      description: page number
      schema:
        type: integer
        minimum: 1
        default: 1
    page_size:
      name: page_size
      in: query
      description: page_size
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 30
    deploymentId:
      name: deploymentId
      in: path
      description: deploymentId
      required: true
      schema:
        type: string
    startTime:
      name: startTime
      in: query
      schema:
        type: string
        format: date-time
      required: true
    endTime:
      name: endTime
      in: query
      schema:
        type: string
        format: date-time
      required: true

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    ##############################################################
    ###############  RequestBodies And Responses #################
    ##############################################################
    PagedResponse:
      type: object
      properties:
        page_size:
          type: integer
        page_number:
          type: integer
        has_previous:
          type: boolean
        count:
          type: integer
    #############################################
    ###############  Exceptions #################
    #############################################
    ExceptionModel:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: InternalServerException
        message: Unexpected error
