openapi: '3.0.2'
info:
  title: JCloudify Api
  version: 'latest'
servers:
  - url: https://jcloudify-api.preprod.hei.school

paths:
  /ping:
    get:
      tags:
        - Health
      operationId: ping
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /whoami:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Security
      summary: Who am I? Tells you who you are.
      operationId: whoami
      responses:
        '200':
          description: Who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /token:
    get:
      tags:
        - Security
      summary: Exchange Github code into token
      operationId: exchangeCode
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Github access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users:
    post:
      tags:
        - User
      summary: User signup
      operationId: createUser
      requestBody:
        required: true
        description: The users to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUsersRequestBody"
      responses:
        '200':
          description: The created user accounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUsersResponse"
        '400':
          $ref: '#/components/responses/400'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /poja-versions:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - PojaVersions
      operationId: getPojaVersions
      summary: get all ready poja versions
      responses:
        '200':
          description: the poja versions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PojaVersionsResponse"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      security:
        - bearerAuth: [ ]
      parameters:
        - name: name
          in: query
          description: Filter applications by name, case insensitive
          schema:
            type: string
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      tags:
        - Application
      operationId: getApplications
      summary: Get all applications
      responses:
        '200':
          description: paged list of applications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedApplicationsResponse"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Application
      operationId: crupdateApplications
      summary: Create or update applications
      description: update if id is provided, create otherwise.
      requestBody:
        required: true
        description: Application to crupdate
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateApplicationsRequestBody"
      responses:
        '200':
          description: The created applications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrupdateApplicationsResponse"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Application
      operationId: getApplicationById
      summary: Get an application by identifier
      responses:
        '200':
          description: The specified application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Environment
      operationId: getApplicationEnvironments
      summary: Get environment list of an application
      description: list of environments, pagination was omitted because we might not have that many environments for a single app
      responses:
        '200':
          description: list of environments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentsResponse'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Environment
      operationId: crupdateApplicationEnvironments
      summary: Crupdate environments of an application.
      description: for each environment in the payload, it creates an environment if given id exists, updates it otherwise
      requestBody:
        description: >
          - All application relative properties such as SSM parameters are computed from the environment's application
          - Resource relative properties are linked to the plan of the Environment and can be set by using a different endpoint for plan upgrade with enum values such as 1024 or 2048 for memory, etc...
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateEnvironmentsRequestBody'
        required: true
      responses:
        '200':
          description: The crupdated environments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrupdateEnvironmentsResponse'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/config:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Environment
      operationId: getApplicationEnvironmentConfig
      summary: Get the config of an environment
      responses:
        '200':
          description: the config for the queried environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneOfPojaConf'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Environment
      operationId: configureApplicationEnv
      summary: configure an application's environment
      security:
        - bearerAuth: [ ]
      requestBody:
        description: the config to apply
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/OneOfPojaConf"
      responses:
        '200':
          description: the applied config
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/OneOfPojaConf"
  /users/{userId}/applications/{applicationId}/environments/{environmentId}/deploymentInitiation:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Stack
      summary: Update stack if stack_id provided, created new stack otherwise
      operationId: initiateStackDeployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateStackDeploymentRequestBody"
      responses:
        '200':
          description: Deployment successfully initiated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiateStackDeploymentResponse"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments/{environmentId}/stacks:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Stack
      operationId: getEnvironmentStacks
      summary: Get list of stacks for a given environment
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        '200':
          description: paged list of stacks of an environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedStacksResponse'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments/{environmentId}/stacks/{stackId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
      - $ref: '#/components/parameters/stackId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Stack
      operationId: getStackById
      summary: Get the identified stack
      responses:
        '200':
          description: The identified stack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stack'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments/{environmentId}/stacks/{stackId}/events:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
      - $ref: '#/components/parameters/stackId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Stack
      operationId: getStackEvents
      summary: Get detailed events of a the identified stack
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        '200':
          description: paged list of stack events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedStackEvents'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments/{environmentId}/variables:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Environment
      operationId: getApplicationEnvironmentVariables
      summary: Get environment variables of an environment
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        '200':
          description: paged list of environment variables
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedEnvironmentVariables'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Environment
      operationId: crupdateApplicationEnvironmentVariables
      summary: Crupdate environment variables
      description: update if id is provided, create otherwise.
      requestBody:
        required: true
        description: Environment variable to crupdate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateEnvironmentVariablesRequestBody'
      responses:
        '200':
          description: The created environment variables
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrupdateEnvironmentVariablesResponse'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments/{environmentId}/variables/{variableId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
      - $ref: '#/components/parameters/variableId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Environment
      operationId: getApplicationEnvironmentVariableById
      summary: Get a environment variables by identifier
      responses:
        '200':
          description: The specified environment variable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentVariable'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments/{environmentId}/logs:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
    get:
      security:
        - bearerAuth: [ ]
      parameters:
        - name: log_type
          in: query
          description: Filter logs by log type, case insensitive
          schema:
            type: string
        - name: start_date_time
          in: query
          description: Filter logs within a date and time range, must be used together with `end_date`
          schema:
            type: string
            format: date-time
        - name: end_date_time
          in: query
          description: Filter logs within a date and time range, must be used together with `start_date`
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      tags:
        - Environment
      operationId: getEnvironmentLogs
      summary: Get the logs of an environment
      responses:
        '200':
          description: paged list of logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedLogs'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{userId}/applications/{applicationId}/environments/{environmentId}/logs/{logId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/environmentId'
      - $ref: '#/components/parameters/logId'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Environment
      operationId: getEnvironmentLogById
      summary: Get a logs by identifier
      responses:
        '200':
          description: The specified log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    userId:
      name: userId
      in: path
      description: The identifier of the user
      schema:
        type: string
      required: true
    applicationId:
      name: applicationId
      in: path
      description: The identifier of the application
      schema:
        type: string
      required: true
    environmentId:
      name: environmentId
      in: path
      description: The identifier of the environment
      schema:
        type: string
      required: true
    logId:
      name: logId
      in: path
      description: The identifier of the log of the specified environment
      schema:
        type: string
      required: true
    variableId:
      name: variableId
      in: path
      description: The identifier of the environment variable of the specified application
      schema:
        type: string
      required: true
    stackId:
      name: stackId
      in: path
      description: The identifier of the stack of a given environment
      schema:
        type: string
      required: true
    page:
      name: page
      in: query
      description: page number
      schema:
        type: integer
        minimum: 1
        default: 1
    page_size:
      name: page_size
      in: query
      description: page_size
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 30

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    #############################################
    ###############  Components #################
    #############################################
    Token:
      properties:
        access_token:
          type: string
        token_type:
          type: string
    CreateUser:
      type: object
      properties:
        first_name:
          type: string
          example: Hajatiana
        last_name:
          type: string
          example: Randrianary
        email:
          type: string
          format: email
        token:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
          example: leonardo
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - USER
            - ADMIN
        github_id:
          type: string
        avatar:
          type: string
        first_name:
          type: string
          example: Hajatiana
        last_name:
          type: string
          example: Randrianary
        plan_name:
          type: string

    Whoami:
      properties:
        user:
          $ref: '#/components/schemas/User'

    ApplicationBase:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        archived:
          type: boolean
          default: false
        user_id:
          type: string
        github_repository:
          $ref: "#/components/schemas/GithubRepository"

    GithubRepository:
      type: object
      properties:
        name:
          type: string
        is_private:
          type: boolean
        description:
          type: string

    Application:
      allOf:
        - $ref: '#/components/schemas/ApplicationBase'
      properties:
        creation_datetime:
          type: string
          format: date-time
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment'

    EnvironmentType:
      type: string
      enum:
        - PROD
        - PREPROD
    ##############################################################
    ###############  Poja Configurations #########################
    ##############################################################
    PojaVersionDiscriminator:
      description: will be the discriminator, possible values are the ones available as poja_version
      type: string

    PojaConf:
      type: object
      description: will serve to type all poja confs
      properties:
        version:
          $ref: "#/components/schemas/PojaVersionDiscriminator"
      discriminator:
        propertyName: 'version'
        mapping:
          '17.0.0': '#/components/schemas/PojaConfV17_0_0'
      required:
        - version

      ##############################################################
      ###############  Poja Conf V17.0.0 ###########################
      ##############################################################
    ConcurrencyConfV17_0_0:
      type: object
      properties:
        frontal_reserved_concurrent_executions_nb:
          type: integer
        worker_reserved_concurrent_executions_nb:
          type: integer

    ComputeConfV17_0_0:
      type: object
      properties:
        frontal_memory:
          type: number
          example: 2048
        frontal_function_timeout:
          type: number
          example: 30
        worker_memory:
          type: number
          example: 1024
        worker_batch:
          type: number
          example: 5
        worker_function_1_timeout:
          type: number
          example: 600
        worker_function_2_timeout:
          type: number
          example: 600

    DatabaseConfV17_0_0:
      type: object
      properties:
        with_database:
          type: string
          enum:
            - NONE
            - SQLITE
            - AURORA_POSTGRES
            - NON_MANAGED_POSTGRES
        database_non_root_username:
          type: string
        database_non_root_password:
          type: string
        prod_db_cluster_timeout:
          type: number
          example: 300
        aurora_min_capacity:
          type: number
        aurora_max_capacity:
          type: number
        aurora_scale_point:
          type: number
        aurora_sleep:
          type: number
          example: 300
        aurora_auto_pause:
          type: boolean
          example: false

    StringMap:
      type: object
      additionalProperties:
        type: string

    WithQueuesNbEnum:
      type: number
      enum:
        - 0
        - 1
        - 2
    GeneralPojaConfV17_0_0:
      type: object
      properties:
        cli_version:
          $ref: "#/components/schemas/PojaVersionDiscriminator"
        app_name:
          type: string
        with_snapstart:
          type: string
        with_queues_nb:
          $ref: "#/components/schemas/WithQueuesNbEnum"
        package_full_name:
          type: string
        custom_java_repositories:
          $ref: "#/components/schemas/StringMap"
        custom_java_deps:
          $ref: "#/components/schemas/StringMap"
        custom_java_env_vars:
          $ref: "#/components/schemas/StringMap"
    GenApiClientV17_0_0:
      type: object
      properties:
        aws_account_id:
          type: string
        with_publish_to_npm_registry:
          type: boolean
        ts_client_default_openapi_server_url:
          type: string
        ts_client_api_url_env_var_name:
          type: string
        codeartifact_repository_name:
          type: string
        codeartifact_domain_name:
          type: string
    IntegrationV17_0_0:
      type: object
      properties:
        with_sentry:
          type: boolean
          example: false
        with_sonar:
          type: boolean
          example: false
        with_codeql:
          type: boolean
          example: false
        with_file_storage:
          type: boolean
          example: false
        with_swagger_ui:
          type: boolean
          example: false
    TestingConfV17_0_0:
      type: object
      properties:
        java_facade_it:
          type: string
          example: "FacadeIT"
        jacoco_min_coverage:
          type: number
          example: 0.8
    MailingConfV17_0_0:
      properties:
        ses_source:
          type: string
          example: "noreply@nowhere.com"

    PojaConfV17_0_0:
      type: object
      allOf:
        - $ref: "#/components/schemas/PojaConf"
      required:
        - version
      properties:
        version:
          $ref: "#/components/schemas/PojaVersionDiscriminator"
        general:
          $ref: "#/components/schemas/GeneralPojaConfV17_0_0"
        integration:
          $ref: "#/components/schemas/IntegrationV17_0_0"
        gen_api_client:
          $ref: "#/components/schemas/GenApiClientV17_0_0"
        concurrency:
          $ref: '#/components/schemas/ConcurrencyConfV17_0_0'
        compute:
          $ref: '#/components/schemas/ComputeConfV17_0_0'
        emailing:
          $ref: "#/components/schemas/MailingConfV17_0_0"
        testing:
          $ref: "#/components/schemas/TestingConfV17_0_0"
        database:
          $ref: '#/components/schemas/DatabaseConfV17_0_0'
      ##############################################################
      ###############  Poja Conf V17.0.0 ###########################
      ##############################################################
    ##############################################################
    ###############  Poja Configurations #########################
    ##############################################################
    Environment:
      allOf:
        - $ref: '#/components/schemas/CrupdateEnvironment'
      type: object
      properties:
        state:
          type: string
          enum:
            - HEALTHY
            - UNHEALTHY
            - UNKNOWN

    CrupdateEnvironment:
      type: object
      properties:
        id:
          type: string
        environment_type:
          $ref: '#/components/schemas/EnvironmentType'
        archived:
          type: boolean
          default: false

    EnvironmentVariable:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: ENV_EXAMPLE
        value:
          type: string
        archived:
          type: boolean
          default: false
    CrupdateEnvironmentVariable:
      allOf:
        - $ref: '#/components/schemas/EnvironmentVariable'
      properties:
        environmentId:
          type: string
    Log:
      type: object
      properties:
        id:
          type: string
        log_file_uri:
          type: string
          example: https://examplebucket.s3.eu-west-3.amazonaws.com/logfile
        log_datetime:
          type: string
          format: date-time
        log_type:
          type: string
          enum:
            - DEPLOYMENT_LOG
            - APPLICATION_LOG

    InitiateDeployment:
      type: object
      properties:
        id:
          type: string
        stack_type:
          $ref: '#/components/schemas/StackType'
    Stack:
      allOf:
        - $ref: '#/components/schemas/InitiateDeployment'
      type: object
      properties:
        name:
          type: string
        cf_stack_id:
          type: string
        creation_datetime:
          type: string
          format: date-time
        update_datetime:
          type: string
          format: date-time
        application:
          $ref: '#/components/schemas/ApplicationBase'
        environment:
          $ref: '#/components/schemas/Environment'
    StackType:
      type: string
      enum:
        - EVENT
        - COMPUTE_PERMISSION
        - STORAGE_BUCKET
        - STORAGE_DATABASE_POSTGRES
        - STORAGE_DATABASE_SQLITE
    StackEvent:
      type: object
      properties:
        id:
          type: string
        event_id:
          type: string
        logical_resource_id:
          type: string
          description: The AWS identifier of the resource
        resource_type:
          type: string
        timestamp:
          type: string
          format: date-time
        resource_status:
          $ref: '#/components/schemas/StackResourceStatusType'
        status_message:
          type: string
          description: Detailed reason of the status
    StackResourceStatusType:
      type: string
      enum:
        - CREATE_IN_PROGRESS
        - CREATE_FAILED
        - CREATE_COMPLETE
        - DELETE_IN_PROGRESS
        - DELETE_FAILED
        - DELETE_COMPLETE
        - DELETE_SKIPPED
        - UPDATE_IN_PROGRESS
        - UPDATE_FAILED
        - UPDATE_COMPLETE
        - IMPORT_FAILED
        - IMPORT_COMPLETE
        - IMPORT_IN_PROGRESS
        - IMPORT_ROLLBACK_IN_PROGRESS
        - IMPORT_ROLLBACK_FAILED
        - IMPORT_ROLLBACK_COMPLETE
        - UPDATE_ROLLBACK_IN_PROGRESS
        - UPDATE_ROLLBACK_COMPLETE
        - UPDATE_ROLLBACK_FAILED
        - ROLLBACK_IN_PROGRESS
        - ROLLBACK_COMPLETE
        - ROLLBACK_FAILED

    PojaVersion:
      type: object
      properties:
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        human_readable_value:
          type: string
    ##############################################################
    ###############  RequestBodies And Responses #################
    ##############################################################
    PagedResponse:
      type: object
      properties:
        page_size:
          type: integer
        page_number:
          type: integer
        has_previous:
          type: boolean
        count:
          type: integer
    CreateUsersRequestBody:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CreateUser"
    CreateUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
    PagedApplicationsResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
        - properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Application"
    CrupdateApplicationsRequestBody:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationBase"
    CrupdateApplicationsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Application"
    InitiateStackDeploymentRequestBody:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/InitiateDeployment"
    InitiateStackDeploymentResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Stack"
    EnvironmentsResponse:
      type: object
      allOf:
        - properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Environment"
    CrupdateEnvironmentsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Environment"
    CrupdateEnvironmentsRequestBody:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CrupdateEnvironment"
    PagedEnvironmentVariables:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
        - properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/EnvironmentVariable"
    CrupdateEnvironmentVariablesRequestBody:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CrupdateEnvironmentVariable"
    CrupdateEnvironmentVariablesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentVariable"
    PagedLogs:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
        - properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Log"
    PojaVersionsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PojaVersion"
    PagedStacksResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
        - properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Stack'
    PagedStackEvents:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
        - properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StackEvent'
    #############################################
    ###############  OneOf and AnyOf Components ############
    #############################################
    OneOfPojaConf:
      oneOf:
        - $ref: "#/components/schemas/PojaConfV17_0_0"
    #############################################
    ###############  OneOf and AnyOf Components ############
    #############################################

    #############################################
    ###############  Exceptions #################
    #############################################
    ExceptionModel:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/ExceptionModel'
      example:
        type: InternalServerException
        message: Unexpected error
